[{"C:\\Users\\goyal\\Downloads\\Code-Xpert-master\\Code-Xpert-master\\src\\index.js":"1","C:\\Users\\goyal\\Downloads\\Code-Xpert-master\\Code-Xpert-master\\src\\reportWebVitals.js":"2","C:\\Users\\goyal\\Downloads\\Code-Xpert-master\\Code-Xpert-master\\src\\App.js":"3","C:\\Users\\goyal\\Downloads\\Code-Xpert-master\\Code-Xpert-master\\src\\pages\\EditorPage.js":"4","C:\\Users\\goyal\\Downloads\\Code-Xpert-master\\Code-Xpert-master\\src\\pages\\Home.js":"5","C:\\Users\\goyal\\Downloads\\Code-Xpert-master\\Code-Xpert-master\\src\\socket.js":"6","C:\\Users\\goyal\\Downloads\\Code-Xpert-master\\Code-Xpert-master\\src\\Actions.js":"7","C:\\Users\\goyal\\Downloads\\Code-Xpert-master\\Code-Xpert-master\\src\\pages\\Card.js":"8","C:\\Users\\goyal\\Downloads\\Code-Xpert-master\\Code-Xpert-master\\src\\pages\\typewr.js":"9","C:\\Users\\goyal\\Downloads\\Code-Xpert-master\\Code-Xpert-master\\src\\components\\Client.js":"10","C:\\Users\\goyal\\Downloads\\Code-Xpert-master\\Code-Xpert-master\\src\\components\\Editor.js":"11"},{"size":543,"mtime":1688218245159,"results":"12","hashOfConfig":"13"},{"size":362,"mtime":1688218245245,"results":"14","hashOfConfig":"13"},{"size":1135,"mtime":1688218245026,"results":"15","hashOfConfig":"13"},{"size":4077,"mtime":1688218245583,"results":"16","hashOfConfig":"13"},{"size":4318,"mtime":1688218245634,"results":"17","hashOfConfig":"13"},{"size":370,"mtime":1688218245337,"results":"18","hashOfConfig":"13"},{"size":202,"mtime":1688218244941,"results":"19","hashOfConfig":"13"},{"size":202,"mtime":1688218245537,"results":"20","hashOfConfig":"13"},{"size":368,"mtime":1688218245730,"results":"21","hashOfConfig":"13"},{"size":867,"mtime":1688218245396,"results":"22","hashOfConfig":"13"},{"size":2172,"mtime":1688218245443,"results":"23","hashOfConfig":"13"},{"filePath":"24","messages":"25","suppressedMessages":"26","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1o4hdjg",{"filePath":"27","messages":"28","suppressedMessages":"29","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"30","messages":"31","suppressedMessages":"32","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"33","messages":"34","suppressedMessages":"35","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"36"},{"filePath":"37","messages":"38","suppressedMessages":"39","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"40","messages":"41","suppressedMessages":"42","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"43","messages":"44","suppressedMessages":"45","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"46","messages":"47","suppressedMessages":"48","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"49","messages":"50","suppressedMessages":"51","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"52","messages":"53","suppressedMessages":"54","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"55","messages":"56","suppressedMessages":"57","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"58"},"C:\\Users\\goyal\\Downloads\\Code-Xpert-master\\Code-Xpert-master\\src\\index.js",[],[],"C:\\Users\\goyal\\Downloads\\Code-Xpert-master\\Code-Xpert-master\\src\\reportWebVitals.js",[],[],"C:\\Users\\goyal\\Downloads\\Code-Xpert-master\\Code-Xpert-master\\src\\App.js",[],[],"C:\\Users\\goyal\\Downloads\\Code-Xpert-master\\Code-Xpert-master\\src\\pages\\EditorPage.js",["59"],[],"import React, { useState, useRef, useEffect } from \"react\";\nimport toast from \"react-hot-toast\";\nimport ACTIONS from \"../Actions\";\nimport Client from \"../components/Client\";\nimport Editor from \"../components/Editor\";\nimport { initSocket } from \"../socket\";\nimport {\n  useLocation,\n  useNavigate,\n  Navigate,\n  useParams,\n} from \"react-router-dom\";\n\nconst EditorPage = () => {\n  const socketRef = useRef(null);\n  const reactNavigator = useNavigate();\n  const location = useLocation();\n  const codeRef = useRef(null);\n  const { roomId } = useParams();\n  const [clients, setClients] = useState([\n     \n  ]);\n\n  useEffect(() => {\n    const init = async () => {\n      socketRef.current = await initSocket(); // client connect to server by this function\n      socketRef.current.on(\"connect_error\", (err) => handleErrors(err));\n      socketRef.current.on(\"connect_failed\", (err) => handleErrors(err));\n\n      function handleErrors(e) {\n        console.log(\"socket error\", e);\n        toast.error(\"Socket connection failed, try again later.\");\n        reactNavigator(\"/\");\n      }\n      // used for room id to send\n      socketRef.current.emit(ACTIONS.JOIN, {\n        // emit the join event\n        roomId,\n        username: location.state?.username, // ? if username not given then not give error\n      });\n\n\n // Listening for joined event \n      socketRef.current.on(\n        ACTIONS.JOINED,\n        ({ clients, username, socketId }) => {\n          if (username !== location.state?.username) { // who are started didnt get notify other will get \n            toast.success(`${username} joined the room.`);\n            console.log(`${username} joined`);\n          }\n          setClients(clients); // pushing client  \n          // as the client join we have to sync the previous code \n          socketRef.current.emit(ACTIONS.SYNC_CODE, {\n            code: codeRef.current,\n            socketId,\n          });\n        }\n      );\n \n          // Listening for disconnected\n          socketRef.current.on(\n            ACTIONS.DISCONNECTED,\n            ({ socketId, username }) => {\n                toast.success(`${username} left the room.`);\n                setClients((prev) => { // recieve the previous state \n                    return prev.filter(   // loop through \n                        (client) => client.socketId !== socketId   // remove the disconnected client \n                    );\n                });\n            }\n        );\n\n    };\n    init();\n   \n  //many listener(ex socket.on) are there so we have to remove them \n  return () => {\n    socketRef.current.disconnect();\n    socketRef.current.off(ACTIONS.JOINED); //unsubscribe the event \n    socketRef.current.off(ACTIONS.DISCONNECTED);\n};\n  }, []);\n\n  \n\n  async function copyRoomId() {\n    try {\n      await navigator.clipboard.writeText(roomId); // inbuit api from browser   \n      toast.success(\"Room ID has been copied to your clipboard\");\n    } catch (err) {\n      toast.error(\"Could not copy the Room ID\");\n      console.error(err);\n    }\n  }\n\n  function leaveRoom() {\n    reactNavigator(\"/\");\n  }\n\n  if (!location.state) {\n    return <Navigate to=\"/\" />;\n  }\n\n  return (\n    <>\n   \n    <div className=\"mainWrap\">\n   \n      <div className=\"editorWrap\">\n        <Editor\n        socketRef={socketRef}\n        roomId={roomId}\n        onCodeChange={(code) => {\n            codeRef.current = code;\n        }}\n        />\n      </div>\n\n      <div className=\"aside\">\n        <div className=\"asideInner\">\n          <div className=\"logo\">\n            <img className=\"logoImage\" src=\"/cx.png\" alt=\"logo\" />\n          </div>\n          <h3>People Joined</h3>\n          <div className=\"clientsList\">\n            {clients.map((client) => (\n              <Client key={client.socketId} username={client.username} />\n            ))}\n          </div>\n        </div>\n        <button className=\"btn copyBtn\" onClick={copyRoomId}>\n          Copy ROOM ID\n        </button>\n        <button className=\"btn leaveBtn\" onClick={leaveRoom}>\n          Leave\n        </button>\n      </div>\n\n    </div>\n    </>\n  );\n};\n\nexport default EditorPage;\n","C:\\Users\\goyal\\Downloads\\Code-Xpert-master\\Code-Xpert-master\\src\\pages\\Home.js",[],[],"C:\\Users\\goyal\\Downloads\\Code-Xpert-master\\Code-Xpert-master\\src\\socket.js",[],[],"C:\\Users\\goyal\\Downloads\\Code-Xpert-master\\Code-Xpert-master\\src\\Actions.js",[],[],"C:\\Users\\goyal\\Downloads\\Code-Xpert-master\\Code-Xpert-master\\src\\pages\\Card.js",[],[],"C:\\Users\\goyal\\Downloads\\Code-Xpert-master\\Code-Xpert-master\\src\\pages\\typewr.js",[],[],"C:\\Users\\goyal\\Downloads\\Code-Xpert-master\\Code-Xpert-master\\src\\components\\Client.js",[],[],"C:\\Users\\goyal\\Downloads\\Code-Xpert-master\\Code-Xpert-master\\src\\components\\Editor.js",["60","61","62"],[],"import React, { useEffect, useRef } from 'react';\nimport Codemirror from 'codemirror';\nimport 'codemirror/lib/codemirror.css';\nimport 'codemirror/theme/dracula.css';\nimport 'codemirror/theme/material-ocean.css';\nimport 'codemirror/theme/monokai.css'\nimport 'codemirror/theme/twilight.css'\nimport 'codemirror/mode/javascript/javascript';\nimport 'codemirror/mode/css/css';\nimport 'codemirror/mode/python/python';\nimport 'codemirror/addon/edit/closetag';\nimport 'codemirror/addon/edit/closebrackets';\nimport ACTIONS from '../Actions';  \n \nconst Editor = ({socketRef,roomId, onCodeChange}) => {\n    const editorRef = useRef(null);\n    useEffect(()=>{\n       // we are connecting codemirror to text editor \n        async function init()\n       { \n        editorRef.current =Codemirror.fromTextArea(\n            document.getElementById('realtimeEditor'),\n            {\n                mode: { name: 'javascript', json: true },\n                theme: 'material-ocean',\n                autoCloseTags: true,\n                autoCloseBrackets: true,\n                lineNumbers: true,\n            }\n        );\n  // when we add delete paste all can be shown in origin we can easily get it \n        editorRef.current.on('change', (instance, changes) => {\n            const { origin } = changes;\n            // console.log(changes);\n            const code = instance.getValue(); //get content of editor \n            onCodeChange(code);\n            if (origin !== 'setValue') {\n                socketRef.current.emit(ACTIONS.CODE_CHANGE, {\n                    roomId,\n                    code,\n                });\n            }\n        }); \n\n   \n\n       }\n   init();\n\n    },[]);\n\n    useEffect(() => {\n        if (socketRef.current) {\n            socketRef.current.on(ACTIONS.CODE_CHANGE, ({ code }) => {\n                if (code !== null) {\n                    editorRef.current.setValue(code);\n                }\n            });\n        }\n    //unsubscribe the code change function \n        return () => {\n            socketRef.current.off(ACTIONS.CODE_CHANGE);\n        };\n    }, [socketRef.current]);\n\n\n    return <textarea id=\"realtimeEditor\"></textarea>;\n};\n\nexport default Editor;\n",{"ruleId":"63","severity":1,"message":"64","line":82,"column":6,"nodeType":"65","endLine":82,"endColumn":8,"suggestions":"66"},{"ruleId":"63","severity":1,"message":"67","line":50,"column":7,"nodeType":"65","endLine":50,"endColumn":9,"suggestions":"68"},{"ruleId":"63","severity":1,"message":"69","line":62,"column":23,"nodeType":"70","endLine":62,"endColumn":30},{"ruleId":"63","severity":1,"message":"71","line":64,"column":8,"nodeType":"65","endLine":64,"endColumn":27,"suggestions":"72"},"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'location.state?.username', 'reactNavigator', and 'roomId'. Either include them or remove the dependency array.","ArrayExpression",["73"],"React Hook useEffect has missing dependencies: 'onCodeChange', 'roomId', and 'socketRef'. Either include them or remove the dependency array. If 'onCodeChange' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["74"],"The ref value 'socketRef.current' will likely have changed by the time this effect cleanup function runs. If this ref points to a node rendered by React, copy 'socketRef.current' to a variable inside the effect, and use that variable in the cleanup function.","Identifier","React Hook useEffect has a missing dependency: 'socketRef'. Either include it or remove the dependency array. Mutable values like 'socketRef.current' aren't valid dependencies because mutating them doesn't re-render the component.",["75"],{"desc":"76","fix":"77"},{"desc":"78","fix":"79"},{"desc":"80","fix":"81"},"Update the dependencies array to be: [location.state?.username, reactNavigator, roomId]",{"range":"82","text":"83"},"Update the dependencies array to be: [onCodeChange, roomId, socketRef]",{"range":"84","text":"85"},"Update the dependencies array to be: [socketRef]",{"range":"86","text":"87"},[2701,2703],"[location.state?.username, reactNavigator, roomId]",[1660,1662],"[onCodeChange, roomId, socketRef]",[2067,2086],"[socketRef]"]