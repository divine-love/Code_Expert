{"ast":null,"code":"var _jsxFileName = \"D:\\\\Web Dev\\\\code-editor\\\\src\\\\pages\\\\EditorPage.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef, useEffect } from \"react\";\nimport toast from \"react-hot-toast\";\nimport ACTIONS from \"../Actions\";\nimport Client from \"../components/Client\";\nimport Editor from \"../components/Editor\";\nimport { initSocket } from \"../socket\";\nimport { useLocation, useNavigate, Navigate, useParams } from \"react-router-dom\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst EditorPage = () => {\n  _s();\n  const socketRef = useRef(null);\n  const reactNavigator = useNavigate();\n  const location = useLocation();\n  const codeRef = useRef(null);\n  const {\n    roomId\n  } = useParams();\n  const [clients, setClients] = useState([]);\n  useEffect(() => {\n    const init = async () => {\n      var _location$state;\n      socketRef.current = await initSocket(); // client connect to server by this function\n      socketRef.current.on(\"connect_error\", err => handleErrors(err));\n      socketRef.current.on(\"connect_failed\", err => handleErrors(err));\n      function handleErrors(e) {\n        console.log(\"socket error\", e);\n        toast.error(\"Socket connection failed, try again later.\");\n        reactNavigator(\"/\");\n      }\n      // used for room id to send\n      socketRef.current.emit(ACTIONS.JOIN, {\n        // emit the join event\n        roomId,\n        username: (_location$state = location.state) === null || _location$state === void 0 ? void 0 : _location$state.username // ? if username not given then not give error\n      });\n\n      // Listening for joined event \n      socketRef.current.on(ACTIONS.JOINED, _ref => {\n        var _location$state2;\n        let {\n          clients,\n          username,\n          socketId\n        } = _ref;\n        if (username !== ((_location$state2 = location.state) === null || _location$state2 === void 0 ? void 0 : _location$state2.username)) {\n          // who are started didnt get notify other will get \n          toast.success(`${username} joined the room.`);\n          console.log(`${username} joined`);\n        }\n        setClients(clients); // pushing client  \n        // as the client join we have to sync the previous code \n        socketRef.current.emit(ACTIONS.SYNC_CODE, {\n          code: codeRef.current,\n          socketId\n        });\n      });\n\n      // Listening for disconnected\n      socketRef.current.on(ACTIONS.DISCONNECTED, _ref2 => {\n        let {\n          socketId,\n          username\n        } = _ref2;\n        toast.success(`${username} left the room.`);\n        setClients(prev => {\n          // recieve the previous state \n          return prev.filter(\n          // loop through \n          client => client.socketId !== socketId // remove the disconnected client \n          );\n        });\n      });\n    };\n\n    init();\n\n    //many listener(ex socket.on) are there so we have to remove them \n    return () => {\n      socketRef.current.disconnect();\n      socketRef.current.off(ACTIONS.JOINED); //unsubscribe the event \n      socketRef.current.off(ACTIONS.DISCONNECTED);\n    };\n  }, []);\n  async function copyRoomId() {\n    try {\n      await navigator.clipboard.writeText(roomId); // inbuit api from browser   \n      toast.success(\"Room ID has been copied to your clipboard\");\n    } catch (err) {\n      toast.error(\"Could not copy the Room ID\");\n      console.error(err);\n    }\n  }\n  function leaveRoom() {\n    reactNavigator(\"/\");\n  }\n  if (!location.state) {\n    return /*#__PURE__*/_jsxDEV(Navigate, {\n      to: \"/\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 12\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Code Expert\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"mainWrap\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"editorWrap\",\n        children: /*#__PURE__*/_jsxDEV(Editor, {\n          socketRef: socketRef,\n          roomId: roomId,\n          onCodeChange: code => {\n            codeRef.current = code;\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 110,\n          columnNumber: 9\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"aside\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"asideInner\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"logo\",\n            children: /*#__PURE__*/_jsxDEV(\"img\", {\n              className: \"logoImage\",\n              src: \"/cx.png\",\n              alt: \"logo\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 122,\n              columnNumber: 13\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 121,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n            children: \"Connected\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 124,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"clientsList\",\n            children: clients.map(client => /*#__PURE__*/_jsxDEV(Client, {\n              username: client.username\n            }, client.socketId, false, {\n              fileName: _jsxFileName,\n              lineNumber: 127,\n              columnNumber: 15\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 125,\n            columnNumber: 11\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 120,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"btn copyBtn\",\n          onClick: copyRoomId,\n          children: \"Copy ROOM ID\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 131,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"btn leaveBtn\",\n          onClick: leaveRoom,\n          children: \"Leave\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 134,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true);\n};\n_s(EditorPage, \"XHhMsoNHHD3iHUx6zIa4Pj1awQw=\", false, function () {\n  return [useNavigate, useLocation, useParams];\n});\n_c = EditorPage;\nexport default EditorPage;\nvar _c;\n$RefreshReg$(_c, \"EditorPage\");","map":{"version":3,"names":["React","useState","useRef","useEffect","toast","ACTIONS","Client","Editor","initSocket","useLocation","useNavigate","Navigate","useParams","jsxDEV","_jsxDEV","Fragment","_Fragment","EditorPage","_s","socketRef","reactNavigator","location","codeRef","roomId","clients","setClients","init","_location$state","current","on","err","handleErrors","e","console","log","error","emit","JOIN","username","state","JOINED","_ref","_location$state2","socketId","success","SYNC_CODE","code","DISCONNECTED","_ref2","prev","filter","client","disconnect","off","copyRoomId","navigator","clipboard","writeText","leaveRoom","to","fileName","_jsxFileName","lineNumber","columnNumber","children","className","onCodeChange","src","alt","map","onClick","_c","$RefreshReg$"],"sources":["D:/Web Dev/code-editor/src/pages/EditorPage.js"],"sourcesContent":["import React, { useState, useRef, useEffect } from \"react\";\nimport toast from \"react-hot-toast\";\nimport ACTIONS from \"../Actions\";\nimport Client from \"../components/Client\";\nimport Editor from \"../components/Editor\";\nimport { initSocket } from \"../socket\";\nimport {\n  useLocation,\n  useNavigate,\n  Navigate,\n  useParams,\n} from \"react-router-dom\";\n\nconst EditorPage = () => {\n  const socketRef = useRef(null);\n  const reactNavigator = useNavigate();\n  const location = useLocation();\n  const codeRef = useRef(null);\n  const { roomId } = useParams();\n  const [clients, setClients] = useState([\n     \n  ]);\n\n  useEffect(() => {\n    const init = async () => {\n      socketRef.current = await initSocket(); // client connect to server by this function\n      socketRef.current.on(\"connect_error\", (err) => handleErrors(err));\n      socketRef.current.on(\"connect_failed\", (err) => handleErrors(err));\n\n      function handleErrors(e) {\n        console.log(\"socket error\", e);\n        toast.error(\"Socket connection failed, try again later.\");\n        reactNavigator(\"/\");\n      }\n      // used for room id to send\n      socketRef.current.emit(ACTIONS.JOIN, {\n        // emit the join event\n        roomId,\n        username: location.state?.username, // ? if username not given then not give error\n      });\n\n\n // Listening for joined event \n      socketRef.current.on(\n        ACTIONS.JOINED,\n        ({ clients, username, socketId }) => {\n          if (username !== location.state?.username) { // who are started didnt get notify other will get \n            toast.success(`${username} joined the room.`);\n            console.log(`${username} joined`);\n          }\n          setClients(clients); // pushing client  \n          // as the client join we have to sync the previous code \n          socketRef.current.emit(ACTIONS.SYNC_CODE, {\n            code: codeRef.current,\n            socketId,\n          });\n        }\n      );\n \n          // Listening for disconnected\n          socketRef.current.on(\n            ACTIONS.DISCONNECTED,\n            ({ socketId, username }) => {\n                toast.success(`${username} left the room.`);\n                setClients((prev) => { // recieve the previous state \n                    return prev.filter(   // loop through \n                        (client) => client.socketId !== socketId   // remove the disconnected client \n                    );\n                });\n            }\n        );\n\n    };\n    init();\n   \n  //many listener(ex socket.on) are there so we have to remove them \n  return () => {\n    socketRef.current.disconnect();\n    socketRef.current.off(ACTIONS.JOINED); //unsubscribe the event \n    socketRef.current.off(ACTIONS.DISCONNECTED);\n};\n  }, []);\n\n  \n\n  async function copyRoomId() {\n    try {\n      await navigator.clipboard.writeText(roomId); // inbuit api from browser   \n      toast.success(\"Room ID has been copied to your clipboard\");\n    } catch (err) {\n      toast.error(\"Could not copy the Room ID\");\n      console.error(err);\n    }\n  }\n\n  function leaveRoom() {\n    reactNavigator(\"/\");\n  }\n\n  if (!location.state) {\n    return <Navigate to=\"/\" />;\n  }\n\n  return (\n    <>\n    <h1>Code Expert</h1>\n    <div className=\"mainWrap\">\n   \n      <div className=\"editorWrap\">\n        <Editor\n        socketRef={socketRef}\n        roomId={roomId}\n        onCodeChange={(code) => {\n            codeRef.current = code;\n        }}\n        />\n      </div>\n\n      <div className=\"aside\">\n        <div className=\"asideInner\">\n          <div className=\"logo\">\n            <img className=\"logoImage\" src=\"/cx.png\" alt=\"logo\" />\n          </div>\n          <h3>Connected</h3>\n          <div className=\"clientsList\">\n            {clients.map((client) => (\n              <Client key={client.socketId} username={client.username} />\n            ))}\n          </div>\n        </div>\n        <button className=\"btn copyBtn\" onClick={copyRoomId}>\n          Copy ROOM ID\n        </button>\n        <button className=\"btn leaveBtn\" onClick={leaveRoom}>\n          Leave\n        </button>\n      </div>\n\n    </div>\n    </>\n  );\n};\n\nexport default EditorPage;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,MAAM,EAAEC,SAAS,QAAQ,OAAO;AAC1D,OAAOC,KAAK,MAAM,iBAAiB;AACnC,OAAOC,OAAO,MAAM,YAAY;AAChC,OAAOC,MAAM,MAAM,sBAAsB;AACzC,OAAOC,MAAM,MAAM,sBAAsB;AACzC,SAASC,UAAU,QAAQ,WAAW;AACtC,SACEC,WAAW,EACXC,WAAW,EACXC,QAAQ,EACRC,SAAS,QACJ,kBAAkB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAAA,SAAAC,QAAA,IAAAC,SAAA;AAE1B,MAAMC,UAAU,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACvB,MAAMC,SAAS,GAAGjB,MAAM,CAAC,IAAI,CAAC;EAC9B,MAAMkB,cAAc,GAAGV,WAAW,CAAC,CAAC;EACpC,MAAMW,QAAQ,GAAGZ,WAAW,CAAC,CAAC;EAC9B,MAAMa,OAAO,GAAGpB,MAAM,CAAC,IAAI,CAAC;EAC5B,MAAM;IAAEqB;EAAO,CAAC,GAAGX,SAAS,CAAC,CAAC;EAC9B,MAAM,CAACY,OAAO,EAAEC,UAAU,CAAC,GAAGxB,QAAQ,CAAC,EAEtC,CAAC;EAEFE,SAAS,CAAC,MAAM;IACd,MAAMuB,IAAI,GAAG,MAAAA,CAAA,KAAY;MAAA,IAAAC,eAAA;MACvBR,SAAS,CAACS,OAAO,GAAG,MAAMpB,UAAU,CAAC,CAAC,CAAC,CAAC;MACxCW,SAAS,CAACS,OAAO,CAACC,EAAE,CAAC,eAAe,EAAGC,GAAG,IAAKC,YAAY,CAACD,GAAG,CAAC,CAAC;MACjEX,SAAS,CAACS,OAAO,CAACC,EAAE,CAAC,gBAAgB,EAAGC,GAAG,IAAKC,YAAY,CAACD,GAAG,CAAC,CAAC;MAElE,SAASC,YAAYA,CAACC,CAAC,EAAE;QACvBC,OAAO,CAACC,GAAG,CAAC,cAAc,EAAEF,CAAC,CAAC;QAC9B5B,KAAK,CAAC+B,KAAK,CAAC,4CAA4C,CAAC;QACzDf,cAAc,CAAC,GAAG,CAAC;MACrB;MACA;MACAD,SAAS,CAACS,OAAO,CAACQ,IAAI,CAAC/B,OAAO,CAACgC,IAAI,EAAE;QACnC;QACAd,MAAM;QACNe,QAAQ,GAAAX,eAAA,GAAEN,QAAQ,CAACkB,KAAK,cAAAZ,eAAA,uBAAdA,eAAA,CAAgBW,QAAQ,CAAE;MACtC,CAAC,CAAC;;MAGP;MACKnB,SAAS,CAACS,OAAO,CAACC,EAAE,CAClBxB,OAAO,CAACmC,MAAM,EACdC,IAAA,IAAqC;QAAA,IAAAC,gBAAA;QAAA,IAApC;UAAElB,OAAO;UAAEc,QAAQ;UAAEK;QAAS,CAAC,GAAAF,IAAA;QAC9B,IAAIH,QAAQ,OAAAI,gBAAA,GAAKrB,QAAQ,CAACkB,KAAK,cAAAG,gBAAA,uBAAdA,gBAAA,CAAgBJ,QAAQ,GAAE;UAAE;UAC3ClC,KAAK,CAACwC,OAAO,CAAE,GAAEN,QAAS,mBAAkB,CAAC;UAC7CL,OAAO,CAACC,GAAG,CAAE,GAAEI,QAAS,SAAQ,CAAC;QACnC;QACAb,UAAU,CAACD,OAAO,CAAC,CAAC,CAAC;QACrB;QACAL,SAAS,CAACS,OAAO,CAACQ,IAAI,CAAC/B,OAAO,CAACwC,SAAS,EAAE;UACxCC,IAAI,EAAExB,OAAO,CAACM,OAAO;UACrBe;QACF,CAAC,CAAC;MACJ,CACF,CAAC;;MAEG;MACAxB,SAAS,CAACS,OAAO,CAACC,EAAE,CAClBxB,OAAO,CAAC0C,YAAY,EACpBC,KAAA,IAA4B;QAAA,IAA3B;UAAEL,QAAQ;UAAEL;QAAS,CAAC,GAAAU,KAAA;QACnB5C,KAAK,CAACwC,OAAO,CAAE,GAAEN,QAAS,iBAAgB,CAAC;QAC3Cb,UAAU,CAAEwB,IAAI,IAAK;UAAE;UACnB,OAAOA,IAAI,CAACC,MAAM;UAAI;UACjBC,MAAM,IAAKA,MAAM,CAACR,QAAQ,KAAKA,QAAQ,CAAG;UAC/C,CAAC;QACL,CAAC,CAAC;MACN,CACJ,CAAC;IAEL,CAAC;;IACDjB,IAAI,CAAC,CAAC;;IAER;IACA,OAAO,MAAM;MACXP,SAAS,CAACS,OAAO,CAACwB,UAAU,CAAC,CAAC;MAC9BjC,SAAS,CAACS,OAAO,CAACyB,GAAG,CAAChD,OAAO,CAACmC,MAAM,CAAC,CAAC,CAAC;MACvCrB,SAAS,CAACS,OAAO,CAACyB,GAAG,CAAChD,OAAO,CAAC0C,YAAY,CAAC;IAC/C,CAAC;EACC,CAAC,EAAE,EAAE,CAAC;EAIN,eAAeO,UAAUA,CAAA,EAAG;IAC1B,IAAI;MACF,MAAMC,SAAS,CAACC,SAAS,CAACC,SAAS,CAAClC,MAAM,CAAC,CAAC,CAAC;MAC7CnB,KAAK,CAACwC,OAAO,CAAC,2CAA2C,CAAC;IAC5D,CAAC,CAAC,OAAOd,GAAG,EAAE;MACZ1B,KAAK,CAAC+B,KAAK,CAAC,4BAA4B,CAAC;MACzCF,OAAO,CAACE,KAAK,CAACL,GAAG,CAAC;IACpB;EACF;EAEA,SAAS4B,SAASA,CAAA,EAAG;IACnBtC,cAAc,CAAC,GAAG,CAAC;EACrB;EAEA,IAAI,CAACC,QAAQ,CAACkB,KAAK,EAAE;IACnB,oBAAOzB,OAAA,CAACH,QAAQ;MAACgD,EAAE,EAAC;IAAG;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EAC5B;EAEA,oBACEjD,OAAA,CAAAE,SAAA;IAAAgD,QAAA,gBACAlD,OAAA;MAAAkD,QAAA,EAAI;IAAW;MAAAJ,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACpBjD,OAAA;MAAKmD,SAAS,EAAC,UAAU;MAAAD,QAAA,gBAEvBlD,OAAA;QAAKmD,SAAS,EAAC,YAAY;QAAAD,QAAA,eACzBlD,OAAA,CAACP,MAAM;UACPY,SAAS,EAAEA,SAAU;UACrBI,MAAM,EAAEA,MAAO;UACf2C,YAAY,EAAGpB,IAAI,IAAK;YACpBxB,OAAO,CAACM,OAAO,GAAGkB,IAAI;UAC1B;QAAE;UAAAc,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACD;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACC,CAAC,eAENjD,OAAA;QAAKmD,SAAS,EAAC,OAAO;QAAAD,QAAA,gBACpBlD,OAAA;UAAKmD,SAAS,EAAC,YAAY;UAAAD,QAAA,gBACzBlD,OAAA;YAAKmD,SAAS,EAAC,MAAM;YAAAD,QAAA,eACnBlD,OAAA;cAAKmD,SAAS,EAAC,WAAW;cAACE,GAAG,EAAC,SAAS;cAACC,GAAG,EAAC;YAAM;cAAAR,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAE;UAAC;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACnD,CAAC,eACNjD,OAAA;YAAAkD,QAAA,EAAI;UAAS;YAAAJ,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAI,CAAC,eAClBjD,OAAA;YAAKmD,SAAS,EAAC,aAAa;YAAAD,QAAA,EACzBxC,OAAO,CAAC6C,GAAG,CAAElB,MAAM,iBAClBrC,OAAA,CAACR,MAAM;cAAuBgC,QAAQ,EAAEa,MAAM,CAACb;YAAS,GAA3Ca,MAAM,CAACR,QAAQ;cAAAiB,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAA8B,CAC3D;UAAC;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACC,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACH,CAAC,eACNjD,OAAA;UAAQmD,SAAS,EAAC,aAAa;UAACK,OAAO,EAAEhB,UAAW;UAAAU,QAAA,EAAC;QAErD;UAAAJ,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC,eACTjD,OAAA;UAAQmD,SAAS,EAAC,cAAc;UAACK,OAAO,EAAEZ,SAAU;UAAAM,QAAA,EAAC;QAErD;UAAAJ,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACN,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAEH,CAAC;EAAA,eACJ,CAAC;AAEP,CAAC;AAAC7C,EAAA,CAhIID,UAAU;EAAA,QAESP,WAAW,EACjBD,WAAW,EAETG,SAAS;AAAA;AAAA2D,EAAA,GALxBtD,UAAU;AAkIhB,eAAeA,UAAU;AAAC,IAAAsD,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}