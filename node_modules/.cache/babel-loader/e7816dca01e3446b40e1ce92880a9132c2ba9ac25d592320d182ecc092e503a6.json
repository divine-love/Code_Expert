{"ast":null,"code":"var _jsxFileName = \"D:\\\\Web Dev\\\\Code\\\\code-editor\\\\src\\\\pages\\\\EditorPage.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef, useEffect } from \"react\";\nimport toast from \"react-hot-toast\";\nimport ACTIONS from \"../Actions\";\nimport Client from \"../components/Client\";\nimport Editor from \"../components/Editor\";\nimport { initSocket } from \"../socket\";\nimport { useLocation, useNavigate, Navigate, useParams } from \"react-router-dom\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst EditorPage = () => {\n  _s();\n  const socketRef = useRef(null);\n  const reactNavigator = useNavigate();\n  const location = useLocation();\n  const {\n    roomId\n  } = useParams();\n  useEffect(() => {\n    const init = async () => {\n      var _location$state;\n      socketRef.current = await initSocket(); // client connect to server by this function\n      socketRef.current.on(\"connect_error\", err => handleErrors(err));\n      socketRef.current.on(\"connect_failed\", err => handleErrors(err));\n      function handleErrors(e) {\n        console.log(\"socket error\", e);\n        toast.error(\"Socket connection failed, try again later.\");\n        reactNavigator(\"/\");\n      }\n      // used for room id to send\n      socketRef.current.emit(ACTIONS.JOIN, {\n        // emit the join event\n        roomId,\n        username: (_location$state = location.state) === null || _location$state === void 0 ? void 0 : _location$state.username // ? if username not given then not give error\n      });\n      // Listening for joined event \n      socketRef.current.on(ACTIONS.JOINED, _ref => {\n        var _location$state2;\n        let {\n          clients,\n          username,\n          socketId\n        } = _ref;\n        if (username !== ((_location$state2 = location.state) === null || _location$state2 === void 0 ? void 0 : _location$state2.username)) {\n          // who are started didnt get notify other will get \n          toast.success(`${username} joined the room.`);\n          console.log(`${username} joined`);\n        }\n        setClients(clients);\n        socketRef.current.emit(ACTIONS.SYNC_CODE, {\n          code: codeRef.current,\n          socketId\n        });\n      });\n    };\n    init();\n  }, []);\n  const [clients, setClients] = useState([{\n    socketId: 1,\n    username: \"Rakesh\"\n  }, {\n    socketId: 2,\n    username: \"Sankalp\"\n  }, {\n    socketId: 3,\n    username: \"dsfg Sankgssalp\"\n  }]);\n  async function copyRoomId() {\n    try {\n      await navigator.clipboard.writeText(roomId);\n      toast.success(\"Room ID has been copied to your clipboard\");\n    } catch (err) {\n      toast.error(\"Could not copy the Room ID\");\n      console.error(err);\n    }\n  }\n  function leaveRoom() {\n    reactNavigator(\"/\");\n  }\n  if (!location.state) {\n    return /*#__PURE__*/_jsxDEV(Navigate, {\n      to: \"/\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 12\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"mainWrap\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"aside\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"asideInner\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"logo\",\n          children: /*#__PURE__*/_jsxDEV(\"img\", {\n            className: \"logoImage\",\n            src: \"/code-sync.png\",\n            alt: \"logo\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 84,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Connected\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"clientsList\",\n          children: clients.map(client => /*#__PURE__*/_jsxDEV(Client, {\n            username: client.username\n          }, client.socketId, false, {\n            fileName: _jsxFileName,\n            lineNumber: 89,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"btn copyBtn\",\n        onClick: copyRoomId,\n        children: \"Copy ROOM ID\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"btn leaveBtn\",\n        onClick: leaveRoom,\n        children: \"Leave\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"editorWrap\",\n      children: /*#__PURE__*/_jsxDEV(Editor\n      // socketRef={socketRef}\n      // roomId={roomId}\n      // onCodeChange={(code) => {\n      //     codeRef.current = code;\n      // }}\n      , {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 80,\n    columnNumber: 5\n  }, this);\n};\n_s(EditorPage, \"Ue/mjW87k4LtaWXGMpUsiagNQqE=\", false, function () {\n  return [useNavigate, useLocation, useParams];\n});\n_c = EditorPage;\nexport default EditorPage;\nvar _c;\n$RefreshReg$(_c, \"EditorPage\");","map":{"version":3,"names":["React","useState","useRef","useEffect","toast","ACTIONS","Client","Editor","initSocket","useLocation","useNavigate","Navigate","useParams","jsxDEV","_jsxDEV","EditorPage","_s","socketRef","reactNavigator","location","roomId","init","_location$state","current","on","err","handleErrors","e","console","log","error","emit","JOIN","username","state","JOINED","_ref","_location$state2","clients","socketId","success","setClients","SYNC_CODE","code","codeRef","copyRoomId","navigator","clipboard","writeText","leaveRoom","to","fileName","_jsxFileName","lineNumber","columnNumber","className","children","src","alt","map","client","onClick","_c","$RefreshReg$"],"sources":["D:/Web Dev/Code/code-editor/src/pages/EditorPage.js"],"sourcesContent":["import React, { useState, useRef, useEffect } from \"react\";\nimport toast from \"react-hot-toast\";\nimport ACTIONS from \"../Actions\";\nimport Client from \"../components/Client\";\nimport Editor from \"../components/Editor\";\nimport { initSocket } from \"../socket\";\nimport {\n  useLocation,\n  useNavigate,\n  Navigate,\n  useParams,\n} from \"react-router-dom\";\n\nconst EditorPage = () => {\n  const socketRef = useRef(null);\n  const reactNavigator = useNavigate();\n  const location = useLocation();\n  const { roomId } = useParams();\n  useEffect(() => {\n    const init = async () => {\n      socketRef.current = await initSocket(); // client connect to server by this function\n      socketRef.current.on(\"connect_error\", (err) => handleErrors(err));\n      socketRef.current.on(\"connect_failed\", (err) => handleErrors(err));\n\n      function handleErrors(e) {\n        console.log(\"socket error\", e);\n        toast.error(\"Socket connection failed, try again later.\");\n        reactNavigator(\"/\");\n      }\n      // used for room id to send\n      socketRef.current.emit(ACTIONS.JOIN, {\n        // emit the join event\n        roomId,\n        username: location.state?.username, // ? if username not given then not give error\n      });\n // Listening for joined event \n      socketRef.current.on(\n        ACTIONS.JOINED,\n        ({ clients, username, socketId }) => {\n          if (username !== location.state?.username) { // who are started didnt get notify other will get \n            toast.success(`${username} joined the room.`);\n            console.log(`${username} joined`);\n          }\n          setClients(clients);\n          socketRef.current.emit(ACTIONS.SYNC_CODE, {\n            code: codeRef.current,\n            socketId,\n          });\n        }\n      );\n    };\n    init();\n  }, []);\n\n  const [clients, setClients] = useState([\n    { socketId: 1, username: \"Rakesh\" },\n    { socketId: 2, username: \"Sankalp\" },\n    { socketId: 3, username: \"dsfg Sankgssalp\" },\n  ]);\n\n  async function copyRoomId() {\n    try {\n      await navigator.clipboard.writeText(roomId);\n      toast.success(\"Room ID has been copied to your clipboard\");\n    } catch (err) {\n      toast.error(\"Could not copy the Room ID\");\n      console.error(err);\n    }\n  }\n\n  function leaveRoom() {\n    reactNavigator(\"/\");\n  }\n\n  if (!location.state) {\n    return <Navigate to=\"/\" />;\n  }\n\n  return (\n    <div className=\"mainWrap\">\n      <div className=\"aside\">\n        <div className=\"asideInner\">\n          <div className=\"logo\">\n            <img className=\"logoImage\" src=\"/code-sync.png\" alt=\"logo\" />\n          </div>\n          <h3>Connected</h3>\n          <div className=\"clientsList\">\n            {clients.map((client) => (\n              <Client key={client.socketId} username={client.username} />\n            ))}\n          </div>\n        </div>\n        <button className=\"btn copyBtn\" onClick={copyRoomId}>\n          Copy ROOM ID\n        </button>\n        <button className=\"btn leaveBtn\" onClick={leaveRoom}>\n          Leave\n        </button>\n      </div>\n      <div className=\"editorWrap\">\n        <Editor\n        // socketRef={socketRef}\n        // roomId={roomId}\n        // onCodeChange={(code) => {\n        //     codeRef.current = code;\n        // }}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default EditorPage;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}