{"ast":null,"code":"var _jsxFileName = \"D:\\\\Web Dev\\\\Code\\\\code-editor\\\\src\\\\pages\\\\EditorPage.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef, useEffect } from 'react';\nimport toast from 'react-hot-toast';\n// import ACTIONS from '../Actions';\n// import Client from '../components/Client';\n// import Editor from '../components/Editor';\n// import { initSocket } from '../socket';\n// import {\n//     useLocation,\n//     useNavigate,\n//     Navigate,\n//     useParams,\n// } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst EditorPage = () => {\n  _s();\n  //     const socketRef = useRef(null);\n  //     const codeRef = useRef(null);\n  //     const location = useLocation();\n  //     const { roomId } = useParams();\n  //     const reactNavigator = useNavigate();\n  const [clients, setClients] = useState([]);\n\n  //     useEffect(() => {\n  //         const init = async () => {\n  //             socketRef.current = await initSocket();\n  //             socketRef.current.on('connect_error', (err) => handleErrors(err));\n  //             socketRef.current.on('connect_failed', (err) => handleErrors(err));\n\n  //             function handleErrors(e) {\n  //                 console.log('socket error', e);\n  //                 toast.error('Socket connection failed, try again later.');\n  //                 reactNavigator('/');\n  //             }\n\n  //             socketRef.current.emit(ACTIONS.JOIN, {\n  //                 roomId,\n  //                 username: location.state?.username,\n  //             });\n\n  //             // Listening for joined event\n  //             socketRef.current.on(\n  //                 ACTIONS.JOINED,\n  //                 ({ clients, username, socketId }) => {\n  //                     if (username !== location.state?.username) {\n  //                         toast.success(`${username} joined the room.`);\n  //                         console.log(`${username} joined`);\n  //                     }\n  //                     setClients(clients);\n  //                     socketRef.current.emit(ACTIONS.SYNC_CODE, {\n  //                         code: codeRef.current,\n  //                         socketId,\n  //                     });\n  //                 }\n  //             );\n\n  //             // Listening for disconnected\n  //             socketRef.current.on(\n  //                 ACTIONS.DISCONNECTED,\n  //                 ({ socketId, username }) => {\n  //                     toast.success(`${username} left the room.`);\n  //                     setClients((prev) => {\n  //                         return prev.filter(\n  //                             (client) => client.socketId !== socketId\n  //                         );\n  //                     });\n  //                 }\n  //             );\n  //         };\n  //         init();\n  //         return () => {\n  //             socketRef.current.disconnect();\n  //             socketRef.current.off(ACTIONS.JOINED);\n  //             socketRef.current.off(ACTIONS.DISCONNECTED);\n  //         };\n  //     }, []);\n\n  //     async function copyRoomId() {\n  //         try {\n  //             await navigator.clipboard.writeText(roomId);\n  //             toast.success('Room ID has been copied to your clipboard');\n  //         } catch (err) {\n  //             toast.error('Could not copy the Room ID');\n  //             console.error(err);\n  //         }\n  //     }\n\n  //     function leaveRoom() {\n  //         reactNavigator('/');\n  //     }\n\n  //     if (!location.state) {\n  //         return <Navigate to=\"/\" />;\n  //     }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"mainWrap\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"aside\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"asideInner\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"logo\",\n          children: /*#__PURE__*/_jsxDEV(\"img\", {\n            className: \"logoImage\",\n            src: \"/code-sync.png\",\n            alt: \"logo\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 99,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Connected\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"clientsList\",\n          children: clients.map(client => /*#__PURE__*/_jsxDEV(Client, {\n            username: client.username\n          }, client.socketId, false, {\n            fileName: _jsxFileName,\n            lineNumber: 108,\n            columnNumber: 29\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 106,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"btn copyBtn\",\n        onClick: copyRoomId,\n        children: \"Copy ROOM ID\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"btn leaveBtn\",\n        onClick: leaveRoom,\n        children: \"Leave\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"editorWrap\",\n      children: /*#__PURE__*/_jsxDEV(Editor, {\n        socketRef: socketRef,\n        roomId: roomId,\n        onCodeChange: code => {\n          codeRef.current = code;\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 95,\n    columnNumber: 9\n  }, this);\n};\n_s(EditorPage, \"hlxqBwWcTyhaGlUbDOHKVgNxwg0=\");\n_c = EditorPage;\nexport default EditorPage;\nvar _c;\n$RefreshReg$(_c, \"EditorPage\");","map":{"version":3,"names":["React","useState","useRef","useEffect","toast","jsxDEV","_jsxDEV","EditorPage","_s","clients","setClients","className","children","src","alt","fileName","_jsxFileName","lineNumber","columnNumber","map","client","Client","username","socketId","onClick","copyRoomId","leaveRoom","Editor","socketRef","roomId","onCodeChange","code","codeRef","current","_c","$RefreshReg$"],"sources":["D:/Web Dev/Code/code-editor/src/pages/EditorPage.js"],"sourcesContent":["import React, { useState, useRef, useEffect } from 'react';\nimport toast from 'react-hot-toast';\n// import ACTIONS from '../Actions';\n// import Client from '../components/Client';\n// import Editor from '../components/Editor';\n// import { initSocket } from '../socket';\n// import {\n//     useLocation,\n//     useNavigate,\n//     Navigate,\n//     useParams,\n// } from 'react-router-dom';\n\nconst EditorPage = () => {\n//     const socketRef = useRef(null);\n//     const codeRef = useRef(null);\n//     const location = useLocation();\n//     const { roomId } = useParams();\n//     const reactNavigator = useNavigate();\n    const [clients, setClients] = useState([]);\n\n//     useEffect(() => {\n//         const init = async () => {\n//             socketRef.current = await initSocket();\n//             socketRef.current.on('connect_error', (err) => handleErrors(err));\n//             socketRef.current.on('connect_failed', (err) => handleErrors(err));\n\n//             function handleErrors(e) {\n//                 console.log('socket error', e);\n//                 toast.error('Socket connection failed, try again later.');\n//                 reactNavigator('/');\n//             }\n\n//             socketRef.current.emit(ACTIONS.JOIN, {\n//                 roomId,\n//                 username: location.state?.username,\n//             });\n\n//             // Listening for joined event\n//             socketRef.current.on(\n//                 ACTIONS.JOINED,\n//                 ({ clients, username, socketId }) => {\n//                     if (username !== location.state?.username) {\n//                         toast.success(`${username} joined the room.`);\n//                         console.log(`${username} joined`);\n//                     }\n//                     setClients(clients);\n//                     socketRef.current.emit(ACTIONS.SYNC_CODE, {\n//                         code: codeRef.current,\n//                         socketId,\n//                     });\n//                 }\n//             );\n\n//             // Listening for disconnected\n//             socketRef.current.on(\n//                 ACTIONS.DISCONNECTED,\n//                 ({ socketId, username }) => {\n//                     toast.success(`${username} left the room.`);\n//                     setClients((prev) => {\n//                         return prev.filter(\n//                             (client) => client.socketId !== socketId\n//                         );\n//                     });\n//                 }\n//             );\n//         };\n//         init();\n//         return () => {\n//             socketRef.current.disconnect();\n//             socketRef.current.off(ACTIONS.JOINED);\n//             socketRef.current.off(ACTIONS.DISCONNECTED);\n//         };\n//     }, []);\n\n//     async function copyRoomId() {\n//         try {\n//             await navigator.clipboard.writeText(roomId);\n//             toast.success('Room ID has been copied to your clipboard');\n//         } catch (err) {\n//             toast.error('Could not copy the Room ID');\n//             console.error(err);\n//         }\n//     }\n\n//     function leaveRoom() {\n//         reactNavigator('/');\n//     }\n\n//     if (!location.state) {\n//         return <Navigate to=\"/\" />;\n//     }\n\n    return (\n        <div className=\"mainWrap\">\n            <div className=\"aside\">\n                <div className=\"asideInner\">\n                    <div className=\"logo\">\n                        <img\n                            className=\"logoImage\"\n                            src=\"/code-sync.png\"\n                            alt=\"logo\"\n                        />\n                    </div>\n                    <h3>Connected</h3>\n                    <div className=\"clientsList\">\n                        {clients.map((client) => (\n                            <Client\n                                key={client.socketId}\n                                username={client.username}\n                            />\n                        ))}\n                    </div>\n                </div>\n                <button className=\"btn copyBtn\" onClick={copyRoomId}>\n                    Copy ROOM ID\n                </button>\n                <button className=\"btn leaveBtn\" onClick={leaveRoom}>\n                    Leave\n                </button>\n            </div>\n            <div className=\"editorWrap\">\n                <Editor\n                    socketRef={socketRef}\n                    roomId={roomId}\n                    onCodeChange={(code) => {\n                        codeRef.current = code;\n                    }}\n                />\n            </div>\n        </div>\n    );\n};\n\nexport default EditorPage;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}