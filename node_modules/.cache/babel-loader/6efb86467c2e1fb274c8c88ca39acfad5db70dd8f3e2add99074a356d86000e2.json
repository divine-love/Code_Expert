{"ast":null,"code":"import React, { useState, useRef, useEffect } from 'react';\nimport toast from 'react-hot-toast';\n// import ACTIONS from '../Actions';\n// import Client from '../components/Client';\n// import Editor from '../components/Editor';\n// import { initSocket } from '../socket';\nimport { useLocation, useNavigate, Navigate, useParams } from 'react-router-dom';\n\n// const EditorPage = () => {\n//     const socketRef = useRef(null);\n//     const codeRef = useRef(null);\n//     const location = useLocation();\n//     const { roomId } = useParams();\n//     const reactNavigator = useNavigate();\n//     const [clients, setClients] = useState([]);\n\n//     useEffect(() => {\n//         const init = async () => {\n//             socketRef.current = await initSocket();\n//             socketRef.current.on('connect_error', (err) => handleErrors(err));\n//             socketRef.current.on('connect_failed', (err) => handleErrors(err));\n\n//             function handleErrors(e) {\n//                 console.log('socket error', e);\n//                 toast.error('Socket connection failed, try again later.');\n//                 reactNavigator('/');\n//             }\n\n//             socketRef.current.emit(ACTIONS.JOIN, {\n//                 roomId,\n//                 username: location.state?.username,\n//             });\n\n//             // Listening for joined event\n//             socketRef.current.on(\n//                 ACTIONS.JOINED,\n//                 ({ clients, username, socketId }) => {\n//                     if (username !== location.state?.username) {\n//                         toast.success(`${username} joined the room.`);\n//                         console.log(`${username} joined`);\n//                     }\n//                     setClients(clients);\n//                     socketRef.current.emit(ACTIONS.SYNC_CODE, {\n//                         code: codeRef.current,\n//                         socketId,\n//                     });\n//                 }\n//             );\n\n//             // Listening for disconnected\n//             socketRef.current.on(\n//                 ACTIONS.DISCONNECTED,\n//                 ({ socketId, username }) => {\n//                     toast.success(`${username} left the room.`);\n//                     setClients((prev) => {\n//                         return prev.filter(\n//                             (client) => client.socketId !== socketId\n//                         );\n//                     });\n//                 }\n//             );\n//         };\n//         init();\n//         return () => {\n//             socketRef.current.disconnect();\n//             socketRef.current.off(ACTIONS.JOINED);\n//             socketRef.current.off(ACTIONS.DISCONNECTED);\n//         };\n//     }, []);\n\n//     async function copyRoomId() {\n//         try {\n//             await navigator.clipboard.writeText(roomId);\n//             toast.success('Room ID has been copied to your clipboard');\n//         } catch (err) {\n//             toast.error('Could not copy the Room ID');\n//             console.error(err);\n//         }\n//     }\n\n//     function leaveRoom() {\n//         reactNavigator('/');\n//     }\n\n//     if (!location.state) {\n//         return <Navigate to=\"/\" />;\n//     }\n\n//     return (\n//         <div className=\"mainWrap\">\n//             <div className=\"aside\">\n//                 <div className=\"asideInner\">\n//                     <div className=\"logo\">\n//                         <img\n//                             className=\"logoImage\"\n//                             src=\"/code-sync.png\"\n//                             alt=\"logo\"\n//                         />\n//                     </div>\n//                     <h3>Connected</h3>\n//                     <div className=\"clientsList\">\n//                         {clients.map((client) => (\n//                             <Client\n//                                 key={client.socketId}\n//                                 username={client.username}\n//                             />\n//                         ))}\n//                     </div>\n//                 </div>\n//                 <button className=\"btn copyBtn\" onClick={copyRoomId}>\n//                     Copy ROOM ID\n//                 </button>\n//                 <button className=\"btn leaveBtn\" onClick={leaveRoom}>\n//                     Leave\n//                 </button>\n//             </div>\n//             <div className=\"editorWrap\">\n//                 <Editor\n//                     socketRef={socketRef}\n//                     roomId={roomId}\n//                     onCodeChange={(code) => {\n//                         codeRef.current = code;\n//                     }}\n//                 />\n//             </div>\n//         </div>\n//     );\n// };\n\n// export default EditorPage;","map":{"version":3,"names":["React","useState","useRef","useEffect","toast","useLocation","useNavigate","Navigate","useParams"],"sources":["D:/Web Dev/Code/code-editor/src/pages/EditorPage.js"],"sourcesContent":["import React, { useState, useRef, useEffect } from 'react';\nimport toast from 'react-hot-toast';\n// import ACTIONS from '../Actions';\n// import Client from '../components/Client';\n// import Editor from '../components/Editor';\n// import { initSocket } from '../socket';\nimport {\n    useLocation,\n    useNavigate,\n    Navigate,\n    useParams,\n} from 'react-router-dom';\n\n// const EditorPage = () => {\n//     const socketRef = useRef(null);\n//     const codeRef = useRef(null);\n//     const location = useLocation();\n//     const { roomId } = useParams();\n//     const reactNavigator = useNavigate();\n//     const [clients, setClients] = useState([]);\n\n//     useEffect(() => {\n//         const init = async () => {\n//             socketRef.current = await initSocket();\n//             socketRef.current.on('connect_error', (err) => handleErrors(err));\n//             socketRef.current.on('connect_failed', (err) => handleErrors(err));\n\n//             function handleErrors(e) {\n//                 console.log('socket error', e);\n//                 toast.error('Socket connection failed, try again later.');\n//                 reactNavigator('/');\n//             }\n\n//             socketRef.current.emit(ACTIONS.JOIN, {\n//                 roomId,\n//                 username: location.state?.username,\n//             });\n\n//             // Listening for joined event\n//             socketRef.current.on(\n//                 ACTIONS.JOINED,\n//                 ({ clients, username, socketId }) => {\n//                     if (username !== location.state?.username) {\n//                         toast.success(`${username} joined the room.`);\n//                         console.log(`${username} joined`);\n//                     }\n//                     setClients(clients);\n//                     socketRef.current.emit(ACTIONS.SYNC_CODE, {\n//                         code: codeRef.current,\n//                         socketId,\n//                     });\n//                 }\n//             );\n\n//             // Listening for disconnected\n//             socketRef.current.on(\n//                 ACTIONS.DISCONNECTED,\n//                 ({ socketId, username }) => {\n//                     toast.success(`${username} left the room.`);\n//                     setClients((prev) => {\n//                         return prev.filter(\n//                             (client) => client.socketId !== socketId\n//                         );\n//                     });\n//                 }\n//             );\n//         };\n//         init();\n//         return () => {\n//             socketRef.current.disconnect();\n//             socketRef.current.off(ACTIONS.JOINED);\n//             socketRef.current.off(ACTIONS.DISCONNECTED);\n//         };\n//     }, []);\n\n//     async function copyRoomId() {\n//         try {\n//             await navigator.clipboard.writeText(roomId);\n//             toast.success('Room ID has been copied to your clipboard');\n//         } catch (err) {\n//             toast.error('Could not copy the Room ID');\n//             console.error(err);\n//         }\n//     }\n\n//     function leaveRoom() {\n//         reactNavigator('/');\n//     }\n\n//     if (!location.state) {\n//         return <Navigate to=\"/\" />;\n//     }\n\n//     return (\n//         <div className=\"mainWrap\">\n//             <div className=\"aside\">\n//                 <div className=\"asideInner\">\n//                     <div className=\"logo\">\n//                         <img\n//                             className=\"logoImage\"\n//                             src=\"/code-sync.png\"\n//                             alt=\"logo\"\n//                         />\n//                     </div>\n//                     <h3>Connected</h3>\n//                     <div className=\"clientsList\">\n//                         {clients.map((client) => (\n//                             <Client\n//                                 key={client.socketId}\n//                                 username={client.username}\n//                             />\n//                         ))}\n//                     </div>\n//                 </div>\n//                 <button className=\"btn copyBtn\" onClick={copyRoomId}>\n//                     Copy ROOM ID\n//                 </button>\n//                 <button className=\"btn leaveBtn\" onClick={leaveRoom}>\n//                     Leave\n//                 </button>\n//             </div>\n//             <div className=\"editorWrap\">\n//                 <Editor\n//                     socketRef={socketRef}\n//                     roomId={roomId}\n//                     onCodeChange={(code) => {\n//                         codeRef.current = code;\n//                     }}\n//                 />\n//             </div>\n//         </div>\n//     );\n// };\n\n// export default EditorPage;\n"],"mappings":"AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,MAAM,EAAEC,SAAS,QAAQ,OAAO;AAC1D,OAAOC,KAAK,MAAM,iBAAiB;AACnC;AACA;AACA;AACA;AACA,SACIC,WAAW,EACXC,WAAW,EACXC,QAAQ,EACRC,SAAS,QACN,kBAAkB;;AAEz},"metadata":{},"sourceType":"module","externalDependencies":[]}