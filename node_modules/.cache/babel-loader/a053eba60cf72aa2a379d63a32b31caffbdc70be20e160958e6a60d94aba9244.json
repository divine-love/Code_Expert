{"ast":null,"code":"var _jsxFileName = \"D:\\\\Web Dev\\\\Code\\\\code-editor\\\\src\\\\pages\\\\EditorPage.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef, useEffect } from 'react';\n// import toast from 'react-hot-toast';\n// import ACTIONS from '../Actions';\n// import Client from '../components/Client';\n// import Editor from '../components/Editor';\nimport { initSocket } from '../socket';\nimport { useLocation, useNavigate, Navigate, useParams } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst EditorPage = () => {\n  _s();\n  const socketRef = useRef(null);\n  const codeRef = useRef(null);\n  const location = useLocation();\n  const {\n    roomId\n  } = useParams();\n  const reactNavigator = useNavigate();\n  const [clients, setClients] = useState([]);\n  useEffect(() => {\n    const init = async () => {\n      var _location$state;\n      socketRef.current = await initSocket();\n      socketRef.current.on('connect_error', err => handleErrors(err));\n      socketRef.current.on('connect_failed', err => handleErrors(err));\n      function handleErrors(e) {\n        console.log('socket error', e);\n        toast.error('Socket connection failed, try again later.');\n        reactNavigator('/');\n      }\n      socketRef.current.emit(ACTIONS.JOIN, {\n        roomId,\n        username: (_location$state = location.state) === null || _location$state === void 0 ? void 0 : _location$state.username\n      });\n\n      // Listening for joined event\n      socketRef.current.on(ACTIONS.JOINED, _ref => {\n        var _location$state2;\n        let {\n          clients,\n          username,\n          socketId\n        } = _ref;\n        if (username !== ((_location$state2 = location.state) === null || _location$state2 === void 0 ? void 0 : _location$state2.username)) {\n          toast.success(`${username} joined the room.`);\n          console.log(`${username} joined`);\n        }\n        setClients(clients);\n        socketRef.current.emit(ACTIONS.SYNC_CODE, {\n          code: codeRef.current,\n          socketId\n        });\n      });\n\n      // Listening for disconnected\n      socketRef.current.on(ACTIONS.DISCONNECTED, _ref2 => {\n        let {\n          socketId,\n          username\n        } = _ref2;\n        toast.success(`${username} left the room.`);\n        setClients(prev => {\n          return prev.filter(client => client.socketId !== socketId);\n        });\n      });\n    };\n    init();\n    return () => {\n      if (socketRef.current) {\n        socketRef.current.disconnect();\n        socketRef.current.off(ACTIONS.JOINED);\n        socketRef.current.off(ACTIONS.DISCONNECTED);\n      }\n    };\n  }, []);\n  async function copyRoomId() {\n    try {\n      await navigator.clipboard.writeText(roomId);\n      toast.success('Room ID has been copied to your clipboard');\n    } catch (err) {\n      toast.error('Could not copy the Room ID');\n      console.error(err);\n    }\n  }\n  function leaveRoom() {\n    reactNavigator('/');\n  }\n  if (!location.state) {\n    return /*#__PURE__*/_jsxDEV(Navigate, {\n      to: \"/\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 16\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"mainWrap\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"aside\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"asideInner\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"logo\",\n          children: /*#__PURE__*/_jsxDEV(\"img\", {\n            className: \"logoImage\",\n            src: \"/code-sync.png\",\n            alt: \"logo\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 101,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Connected\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 107,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"clientsList\",\n          children: clients.map(client => /*#__PURE__*/_jsxDEV(Client, {\n            username: client.username\n          }, client.socketId, false, {\n            fileName: _jsxFileName,\n            lineNumber: 110,\n            columnNumber: 29\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"btn copyBtn\",\n        onClick: copyRoomId,\n        children: \"Copy ROOM ID\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"btn leaveBtn\",\n        onClick: leaveRoom,\n        children: \"Leave\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"editorWrap\",\n      children: /*#__PURE__*/_jsxDEV(Editor, {\n        socketRef: socketRef,\n        roomId: roomId,\n        onCodeChange: code => {\n          codeRef.current = code;\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 97,\n    columnNumber: 9\n  }, this);\n};\n_s(EditorPage, \"O5aMOdwt2wCnuqVQk7SgEgKtMHE=\", false, function () {\n  return [useLocation, useParams, useNavigate];\n});\n_c = EditorPage;\nexport default EditorPage;\nvar _c;\n$RefreshReg$(_c, \"EditorPage\");","map":{"version":3,"names":["React","useState","useRef","useEffect","initSocket","useLocation","useNavigate","Navigate","useParams","jsxDEV","_jsxDEV","EditorPage","_s","socketRef","codeRef","location","roomId","reactNavigator","clients","setClients","init","_location$state","current","on","err","handleErrors","e","console","log","toast","error","emit","ACTIONS","JOIN","username","state","JOINED","_ref","_location$state2","socketId","success","SYNC_CODE","code","DISCONNECTED","_ref2","prev","filter","client","disconnect","off","copyRoomId","navigator","clipboard","writeText","leaveRoom","to","fileName","_jsxFileName","lineNumber","columnNumber","className","children","src","alt","map","Client","onClick","Editor","onCodeChange","_c","$RefreshReg$"],"sources":["D:/Web Dev/Code/code-editor/src/pages/EditorPage.js"],"sourcesContent":["import React, { useState, useRef, useEffect } from 'react';\n// import toast from 'react-hot-toast';\n// import ACTIONS from '../Actions';\n// import Client from '../components/Client';\n// import Editor from '../components/Editor';\nimport { initSocket } from '../socket';\nimport {\n    useLocation,\n    useNavigate,\n    Navigate,\n    useParams,\n} from 'react-router-dom';\n\nconst EditorPage = () => {\n    const socketRef = useRef(null);\n    const codeRef = useRef(null);\n    const location = useLocation();\n    const { roomId } = useParams();\n    const reactNavigator = useNavigate();\n    const [clients, setClients] = useState([]);\n\n    useEffect(() => {\n        const init = async () => {\n            socketRef.current = await initSocket();\n            socketRef.current.on('connect_error', (err) => handleErrors(err));\n            socketRef.current.on('connect_failed', (err) => handleErrors(err));\n \n            function handleErrors(e) {\n                console.log('socket error', e);\n                toast.error('Socket connection failed, try again later.');\n                reactNavigator('/');\n            }\n\n            socketRef.current.emit(ACTIONS.JOIN, {\n                roomId,\n                username: location.state?.username,\n            });\n\n            // Listening for joined event\n            socketRef.current.on(\n                ACTIONS.JOINED,\n                ({ clients, username, socketId }) => {\n                    if (username !== location.state?.username) {\n                        toast.success(`${username} joined the room.`);\n                        console.log(`${username} joined`);\n                    }\n                    setClients(clients);\n                    socketRef.current.emit(ACTIONS.SYNC_CODE, {\n                        code: codeRef.current,\n                        socketId,\n                    });\n                }\n            );\n\n            // Listening for disconnected\n            socketRef.current.on(\n                ACTIONS.DISCONNECTED,\n                ({ socketId, username }) => {\n                    toast.success(`${username} left the room.`);\n                    setClients((prev) => {\n                        return prev.filter(\n                            (client) => client.socketId !== socketId\n                        );\n                    });\n                }\n            );\n        };\n        init();\n        return () => {\n            if (socketRef.current) {\n            socketRef.current.disconnect();\n            socketRef.current.off(ACTIONS.JOINED);\n            socketRef.current.off(ACTIONS.DISCONNECTED);\n            }\n        };\n    }, []);\n\n    async function copyRoomId() {\n        try {\n            await navigator.clipboard.writeText(roomId);\n            toast.success('Room ID has been copied to your clipboard');\n        } catch (err) {\n            toast.error('Could not copy the Room ID');\n            console.error(err);\n        }\n    }\n\n    function leaveRoom() {\n        reactNavigator('/');\n    }\n\n    if (!location.state) {\n        return <Navigate to=\"/\" />;\n    }\n\n    return (\n        <div className=\"mainWrap\">\n            <div className=\"aside\">\n                <div className=\"asideInner\">\n                    <div className=\"logo\">\n                        <img\n                            className=\"logoImage\"\n                            src=\"/code-sync.png\"\n                            alt=\"logo\"\n                        />\n                    </div>\n                    <h3>Connected</h3>\n                    <div className=\"clientsList\">\n                        {clients.map((client) => (\n                            <Client\n                                key={client.socketId}\n                                username={client.username}\n                            />\n                        ))}\n                    </div>\n                </div>\n                <button className=\"btn copyBtn\" onClick={copyRoomId}>\n                    Copy ROOM ID\n                </button>\n                <button className=\"btn leaveBtn\" onClick={leaveRoom}>\n                    Leave\n                </button>\n            </div>\n            <div className=\"editorWrap\">\n                <Editor\n                    socketRef={socketRef}\n                    roomId={roomId}\n                    onCodeChange={(code) => {\n                        codeRef.current = code;\n                    }}\n                />\n            </div>\n        </div>\n    );\n};\n\nexport default EditorPage;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}